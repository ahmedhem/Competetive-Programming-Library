ll  p[MX], inv[MX];

long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}

int modularInverse(int a,int m){
    return binpow(a,m-2,m);
}

void start(){
    p[0] = 1;
    for (int i = 1; i < MX; ++i) {
        p[i] = p[i - 1] * 31 % MOD;
    }
    for (int i = 0; i < MX; ++i) {
        inv[i] = modularInverse(binpow(31, i, MOD), MOD);
    }
}
void hash(int idx, string &s){
    h[1] = s[0] - 'a';
    for (int i = 2; i < s.size() + 1; ++i) {
        h[i] = 1ll * h[i - 1] + (s[i - 1] - 'a') * p[i - 1];
    }
}
